import logging
import asyncio
import aiohttp
import feedparser
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TimedOut, TelegramError
from bs4 import BeautifulSoup
import re
import random
import telegram
import os
import datetime
from rss_feeds import RSS_SOURCES

if telegram.__version__ != '21.4':
    print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è python-telegram-bot==21.4, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {telegram.__version__}")
    exit()

try:
    from config import BOT_TOKEN, CHANNEL_ID
except ImportError:
    print("‚ùå –°–æ–∑–¥–∞–π—Ç–µ config.py —Å BOT_TOKEN, CHANNEL_ID!")
    exit()

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

main_keyboard = ReplyKeyboardMarkup([
    ['üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
], resize_keyboard=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏
news_fetched = 0
news_posted = 0

class RealNewsParser:
    USER_AGENTS = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15'
    ]

    @staticmethod
    async def fetch_rss_content(url: str, timeout=60):
        headers = {'User-Agent': random.choice(RealNewsParser.USER_AGENTS)}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=timeout, headers=headers, ssl=False) as response:
                    if response.status == 200:
                        return await response.text(), None
                    logger.error(f"HTTP {response.status} –¥–ª—è {url}")
                    return None, f"HTTP {response.status}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            return None, str(e)

    @staticmethod
    def generate_summary(title: str, summary: str, url: str) -> str:
        desc = BeautifulSoup(summary[:600], 'lxml').get_text(strip=True)
        if len(desc) < 150:
            return ""
        sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?|\!)\s', desc)
        sentences = [s.strip() for s in sentences if s.strip() and s.lower() != title.lower().strip()]
        points = []
        for s in sentences[:3]:
            if s.endswith(('.', '?', '!')):
                points.append(s)
            elif not points:
                return ""
        if not points or len(' '.join(points)) < 150:
            return ""
        return '\n'.join(points)

    @staticmethod
    async def process_news_item(title: str, summary: str, link: str) -> str:
        description = RealNewsParser.generate_summary(title, summary, link)
        if not description:
            return None
        return f"üì∞ <b>{title}</b>\n{description}\n<a href=\"{link}\">üëâ link</a>"

    @staticmethod
    async def fetch_rss_news(context: ContextTypes.DEFAULT_TYPE, limit: int = 6):
        global news_fetched
        news_items = []
        error_urls = []
        debug_info = []
        seen_links_file = 'seen_links.txt'
        seen_links = set()
        used_sources = set()

        if os.path.exists(seen_links_file):
            with open(seen_links_file, 'r') as f:
                seen_links = set(f.read().splitlines())

        random.shuffle(RSS_SOURCES['general'])
        for rss_url in RSS_SOURCES['general']:
            if len(news_items) >= limit:
                break
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é RSS: {rss_url}")
            rss_content, error = await RealNewsParser.fetch_rss_content(rss_url)
            if not rss_content:
                error_urls.append(f"{rss_url} ({error})")
                debug_info.append(f"{rss_url}: –û—à–∏–±–∫–∞ - {error}")
                continue
            feed = feedparser.parse(rss_content)
            if not feed.entries:
                error_urls.append(f"{rss_url} (–ø—É—Å—Ç–∞—è –ª–µ–Ω—Ç–∞)")
                debug_info.append(f"{rss_url}: –ü—É—Å—Ç–∞—è –ª–µ–Ω—Ç–∞")
                continue
            random.shuffle(feed.entries)
            for entry in feed.entries:
                try:
                    link = entry.get('link', '')
                    if link not in seen_links and rss_url not in used_sources:
                        title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                        summary = entry.get('summary', entry.get('description', ''))
                        if not summary:
                            continue
                        processed = await RealNewsParser.process_news_item(title, summary, link)
                        if processed:
                            news_items.append({
                                'title': title,
                                'summary': summary,
                                'link': link
                            })
                            seen_links.add(link)
                            used_sources.add(rss_url)
                            debug_info.append(f"{rss_url}: {title}")
                            news_fetched += 1
                            break
                except Exception as e:
                    debug_info.append(f"{rss_url}: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {entry.get('link', 'unknown')}: {e}")

        with open(seen_links_file, 'a') as f:
            f.write('\n'.join(seen_links))

        return news_items[:limit], error_urls, debug_info

    @staticmethod
    async def format_news_message(news_items):
        message = f"üì∞ <b>–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò</b>\n\n"
        for item in news_items:
            processed = await RealNewsParser.process_news_item(
                item['title'], item['summary'], item['link']
            )
            message += processed + "\n\n‚Äî\n\n"
        message += "üì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º Telegram-–±–æ—Ç–∞</b> üéâ"
        channel_message = f"üì∞ <b>–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò</b>\n\n" + \
                         "\n\n‚Äî\n\n".join([await RealNewsParser.process_news_item(item['title'], item['summary'], item['link']) for item in news_items]) + \
                         "\n\nüì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º Telegram-–±–æ—Ç–∞</b> üéâ"
        return message, channel_message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    seen_links_file = 'seen_links.txt'
    if os.path.exists(seen_links_file):
        os.remove(seen_links_file)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    try:
        await update.message.reply_html(
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=main_keyboard
        )
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòû", reply_markup=main_keyboard)

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ test –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /test")
    try:
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üòä", reply_markup=main_keyboard)
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòû", reply_markup=main_keyboard)

async def send_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_news –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏")
        await update.message.reply_html(f"üì° <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...</b>", reply_markup=main_keyboard)
        all_news, error_urls, debug_info = await RealNewsParser.fetch_rss_news(context)
        if not all_news:
            error_msg = f"‚ö†Ô∏è <b>–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π!</b> üòî"
            if error_urls:
                error_msg += f"\n–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(error_urls[:3])}"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {error_urls}")
            await update.message.reply_html(error_msg, reply_markup=main_keyboard)
            return
        message, channel_message = await RealNewsParser.format_news_message(all_news)
        context.user_data['last_news'] = {
            'items': all_news,
            'message': message,
            'channel_message': channel_message
        }
        await update.message.reply_html(message, disable_web_page_preview=True, reply_markup=main_keyboard)
        logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòû", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}", exc_info=True)
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòû", reply_markup=main_keyboard)

async def post_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global news_posted
    logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ post_to_channel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª")
        if 'last_news' not in context.user_data:
            await update.message.reply_html(f"‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üòî", reply_markup=main_keyboard)
            return
        news_data = context.user_data['last_news']
        await update.message.reply_html(f"üì¢ <b>–ü—É–±–ª–∏–∫—É—é –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª...</b>", reply_markup=main_keyboard)
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=news_data['channel_message'],
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        await update.message.reply_html(f"‚úÖ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!</b> üéâ", reply_markup=main_keyboard)
        news_posted += len(news_data['items'])
        logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. üòû", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòû", reply_markup=main_keyboard)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ show_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        subscriber_count = await context.bot.get_chat_member_count(CHANNEL_ID)
        subscribers_file = 'subscribers.txt'
        subscriber_history = []
        if os.path.exists(subscribers_file):
            with open(subscribers_file, 'r') as f:
                subscriber_history = [line.split(',') for line in f.read().splitlines()]
                subscriber_history = [(datetime.datetime.fromisoformat(date), int(count)) for date, count in subscriber_history]

        with open(subscribers_file, 'a') as f:
            f.write(f"{datetime.datetime.now().isoformat()},{subscriber_count}\n")

        week_ago = datetime.datetime.now() - datetime.timedelta(days=7)
        recent_history = [(date, count) for date, count in subscriber_history if date >= week_ago]
        new_subscribers = 0
        left_subscribers = 0
        if recent_history:
            oldest_count = recent_history[0][1]
            new_subscribers = max(0, subscriber_count - oldest_count)
            left_subscribers = max(0, oldest_count - subscriber_count)

        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_fetched}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {news_posted}\n"
            f"–ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {new_subscribers}\n"
            f"–£—à–µ–¥—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {left_subscribers}\n"
            f"–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscriber_count}"
        )
        await update.message.reply_html(stats_message, reply_markup=main_keyboard)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòû", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòû", reply_markup=main_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    update_id = update.update_id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –æ—Ç {update.effective_user.id}: {text}")
    try:
        if text == 'üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            await send_news(update, context)
        elif text == 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª':
            await post_to_channel(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await show_stats(update, context)
        elif text == 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
            await update.message.reply_text("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ @imcouncilor, imcouncilor@gmail.com", reply_markup=main_keyboard)
        else:
            await update.message.reply_html(f"üìù <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!</b> üòä", reply_markup=main_keyboard)
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –≤ handle_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. üòû", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
        await update.message.reply_html(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòû", reply_markup=main_keyboard)

async def error_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {context.error}", exc_info=True)
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_html(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. üòû", reply_markup=main_keyboard)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

async def main():
    application = Application.builder().token(BOT_TOKEN).read_timeout(60).get_updates_read_timeout(60).write_timeout(60).connect_timeout(60).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_callback)
    
    logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.initialize()
    
    for _ in range(5):
        try:
            updates = await application.bot.get_updates(offset=-1, timeout=30)
            logger.info(f"–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            for update in updates:
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {update.to_dict()}")
            break
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await asyncio.sleep(2)
    
    await application.start()
    logger.info("üöÄ Polling –Ω–∞—á–∞—Ç")
    try:
        await application.updater.start_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            poll_interval=0.5,
            timeout=30
        )
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        try:
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
            logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", exc_info=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)