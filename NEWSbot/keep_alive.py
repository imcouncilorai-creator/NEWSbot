#!/usr/bin/env python3
"""
Keep-alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ Replit
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import os
import logging
from flask import Flask, jsonify
from datetime import datetime
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
start_time = datetime.now()

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
    uptime = datetime.now() - start_time
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Telegram Bot - Keep Alive</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }}
            .container {{
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }}
            .status {{
                background: #d4edda;
                color: #155724;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
            }}
            .info {{
                background: #d1ecf1;
                color: #0c5460;
                padding: 15px;
                border-radius: 5px;
                margin: 20px 0;
            }}
            h1 {{ color: #333; }}
            .emoji {{ font-size: 1.2em; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1><span class="emoji">ü§ñ</span> Telegram Bot Keep-Alive Server</h1>
            
            <div class="status">
                <strong><span class="emoji">üü¢</span> –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω</strong>
            </div>
            
            <div class="info">
                <h3><span class="emoji">üìä</span> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:</h3>
                <ul>
                    <li><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}</li>
                    <li><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {str(uptime).split('.')[0]}</li>
                    <li><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> Replit</li>
                    <li><strong>–ü–æ—Ä—Ç:</strong> 5000</li>
                </ul>
            </div>
            
            <div class="info">
                <h3><span class="emoji">üîß</span> –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h3>
                <ol>
                    <li>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 24/7</li>
                    <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UptimeRobot –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–∏–Ω–≥–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
                    <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</li>
                    <li>URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: <code>https://–≤–∞—à-–¥–æ–º–µ–Ω.repl.co/health</code></li>
                </ol>
            </div>
            
            <div class="info">
                <h3><span class="emoji">üì±</span> API Endpoints:</h3>
                <ul>
                    <li><code>/</code> - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
                    <li><code>/health</code> - JSON —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</li>
                    <li><code>/ping</code> - –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏</li>
                </ul>
            </div>
        </div>
    </body>
    </html>
    """

@app.route('/health')
def health_check():
    """API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    uptime = datetime.now() - start_time
    
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'uptime_seconds': int(uptime.total_seconds()),
        'uptime_human': str(uptime).split('.')[0],
        'start_time': start_time.isoformat(),
        'service': 'telegram_bot_keep_alive'
    })

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø–∏–Ω–≥–∞"""
    return 'pong', 200

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({
        'error': 'Not Found',
        'message': '–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        'available_endpoints': ['/', '/health', '/ping']
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
    return jsonify({
        'error': 'Internal Server Error',
        'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }), 500

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ keep-alive —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è production
        app.config['DEBUG'] = False
        app.config['TESTING'] = False
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Flask –≤ production (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
        log = logging.getLogger('werkzeug')
        log.setLevel(logging.ERROR)
        
        logger.info("üåê Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.run(
            host='0.0.0.0',
            port=5000,
            debug=False,
            use_reloader=False,
            threaded=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ keep-alive —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

def start_keep_alive_thread():
    """–ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    thread = threading.Thread(target=keep_alive, daemon=True)
    thread.start()
    logger.info("‚úÖ Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    return thread

if __name__ == "__main__":
    keep_alive()
