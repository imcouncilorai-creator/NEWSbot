#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import schedule
import time
import asyncio
import logging
import threading
from datetime import datetime
import pytz
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class NewsScheduler:
    def __init__(self, bot_token: str, channel_id: str, news_parser):
        self.bot = Bot(token=bot_token)
        self.channel_id = channel_id
        self.news_parser = news_parser
        self.is_running = False
        self.scheduler_thread = None
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.auto_posts_count = 0
        self.last_auto_post = None
        
    def auto_publish_news(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            moscow_time = datetime.now(self.moscow_tz)
            logger.info(f"üïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {moscow_time.strftime('%H:%M')} –ú–°–ö")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
            asyncio.run(self._async_publish_news())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    async def _async_publish_news(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π context –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class FakeContext:
                pass
            
            fake_context = FakeContext()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news_items, error_urls = await self.news_parser.fetch_rss_news(fake_context, limit=6)
            
            if not news_items:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.news_parser.format_news_message(news_items)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            moscow_time = datetime.now(self.moscow_tz)
            # –ó–∞–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if message.endswith("üì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞</b> üéâ"):
                message = message.replace(
                    "üì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞</b> üéâ",
                    ""
                ).rstrip("\n")
            
            # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if "üì∞ <b>–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò</b>" in message:
                message = message.replace(
                    "üì∞ <b>–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò</b>",
                    "üî• <b>–ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò</b> üî•"
                )
            
            auto_message = (
                f"{message}\n\n"
                f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>\n"
                f"üïê {moscow_time.strftime('%H:%M')} –ú–°–ö\n\n"
                f"üì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞</b> üéâ"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=auto_message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            self.auto_posts_count += 1
            self.last_auto_post = moscow_time
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞–Ω–∞–ª")
            
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        schedule.clear()
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 9:00, 12:00, 15:00, 18:00, 21:00 –ú–°–ö
        schedule.every().day.at("06:00").do(self.auto_publish_news)  # 9:00 –ú–°–ö = 6:00 UTC
        schedule.every().day.at("09:00").do(self.auto_publish_news)  # 12:00 –ú–°–ö = 9:00 UTC  
        schedule.every().day.at("12:00").do(self.auto_publish_news)  # 15:00 –ú–°–ö = 12:00 UTC
        schedule.every().day.at("15:00").do(self.auto_publish_news)  # 18:00 –ú–°–ö = 15:00 UTC
        schedule.every().day.at("18:00").do(self.auto_publish_news)  # 21:00 –ú–°–ö = 18:00 UTC
        
        logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ 9:00, 12:00, 15:00, 18:00, 21:00 –ú–°–ö")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.setup_schedule()
        self.is_running = True
        
        def run_scheduler():
            logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
            while self.is_running:
                try:
                    schedule.run_pending()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    time.sleep(60)
        
        self.scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        self.scheduler_thread.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_schedule_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        moscow_time = datetime.now(self.moscow_tz)
        
        # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –ú–°–ö
        schedule_times = ["09:00", "12:00", "15:00", "18:00", "21:00"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        current_hour = moscow_time.hour
        next_time = None
        
        for time_str in schedule_times:
            hour = int(time_str.split(':')[0])
            if hour > current_hour:
                next_time = time_str
                break
        
        if not next_time:
            next_time = schedule_times[0]  # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        
        return {
            'auto_posts_count': self.auto_posts_count,
            'last_auto_post': self.last_auto_post.strftime('%d.%m.%Y %H:%M –ú–°–ö') if self.last_auto_post else '–ù–µ—Ç',
            'next_auto_post': f"–°–µ–≥–æ–¥–Ω—è –≤ {next_time} –ú–°–ö" if next_time != schedule_times[0] else f"–ó–∞–≤—Ç—Ä–∞ –≤ {next_time} –ú–°–ö",
            'schedule_times': schedule_times,
            'is_running': self.is_running
        }