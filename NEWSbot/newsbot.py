#!/usr/bin/env python3
"""
–ù–æ–≤–æ—Å—Ç–Ω–æ–π Telegram –±–æ—Ç –¥–ª—è Replit —Å keep-alive
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç
"""

import logging
import asyncio
import aiohttp
import feedparser
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from telegram.error import TimedOut, TelegramError
from bs4 import BeautifulSoup
import re
import random
import os
import datetime
import threading
import time

try:
    from rss_feeds import RSS_SOURCES
    from config import BOT_TOKEN, BOT_USERNAME, CHANNEL_ID
    from keep_alive import keep_alive
    from scheduler import NewsScheduler
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–°–æ–∑–¥–∞–π—Ç–µ config.py —Å BOT_TOKEN, CHANNEL_ID!")
    exit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('newsbot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup([
    ['üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìÖ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è'],
    ['üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
], resize_keyboard=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏
news_fetched = 0
news_posted = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler_instance = None

class RealNewsParser:
    USER_AGENTS = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15'
    ]

    @staticmethod
    async def fetch_rss_content(url: str, timeout=60):
        headers = {'User-Agent': random.choice(RealNewsParser.USER_AGENTS)}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=timeout, headers=headers, ssl=False) as response:
                    if response.status == 200:
                        return await response.text(), None
                    logger.error(f"HTTP {response.status} –¥–ª—è {url}")
                    return None, f"HTTP {response.status}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            return None, str(e)

    @staticmethod
    def generate_summary(title: str, summary: str, url: str) -> str:
        desc = BeautifulSoup(summary[:600], 'html.parser').get_text(strip=True)
        if len(desc) < 150:
            return ""
        sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?|\!)\s', desc)
        sentences = [s.strip() for s in sentences if s.strip() and s.lower() != title.lower().strip()]
        points = []
        for s in sentences[:3]:
            if s.endswith(('.', '?', '!')):
                points.append(s)
            elif not points:
                return ""
        if not points or len(' '.join(points)) < 150:
            return ""
        return '\n'.join(points)

    @staticmethod
    async def process_news_item(title: str, summary: str, link: str) -> str:
        description = RealNewsParser.generate_summary(title, summary, link)
        if not description:
            return None
        return f"üì∞ <b>{title}</b>\n{description}\n<a href=\"{link}\">üëâ –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>"

    @staticmethod
    async def fetch_rss_news(context: CallbackContext, limit: int = 6):
        global news_fetched
        news_items = []
        error_urls = []
        seen_links_file = 'seen_links.txt'
        seen_links = set()
        used_sources = set()

        if os.path.exists(seen_links_file):
            with open(seen_links_file, 'r', encoding='utf-8') as f:
                seen_links = set(f.read().splitlines())

        random.shuffle(RSS_SOURCES['general'])
        for rss_url in RSS_SOURCES['general']:
            if len(news_items) >= limit:
                break
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é RSS: {rss_url}")
            rss_content, error = await RealNewsParser.fetch_rss_content(rss_url)
            if not rss_content:
                error_urls.append(f"{rss_url} ({error})")
                continue
            feed = feedparser.parse(rss_content)
            if not feed.entries:
                error_urls.append(f"{rss_url} (–ø—É—Å—Ç–∞—è –ª–µ–Ω—Ç–∞)")
                continue
            random.shuffle(feed.entries)
            for entry in feed.entries:
                try:
                    link = entry.get('link', '')
                    if link not in seen_links and rss_url not in used_sources:
                        title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                        summary = entry.get('summary', entry.get('description', ''))
                        if not summary:
                            continue
                        processed = await RealNewsParser.process_news_item(title, summary, link)
                        if processed:
                            news_items.append({
                                'title': title,
                                'summary': summary,
                                'link': link
                            })
                            seen_links.add(link)
                            used_sources.add(rss_url)
                            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")
                            news_fetched += 1
                            break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {entry.get('link', 'unknown')}: {e}")

        with open(seen_links_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(seen_links))

        return news_items[:limit], error_urls

    @staticmethod
    async def format_news_message(news_items):
        message = f"üî• <b>–ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò</b> üî•\n\n"
        for item in news_items:
            processed = await RealNewsParser.process_news_item(
                item['title'], item['summary'], item['link']
            )
            if processed:
                message += processed + "\n\n‚Äî\n\n"
        message += "üì¢ <b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ Telegram-–±–æ—Ç–∞</b> üéâ"
        return message

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    seen_links_file = 'seen_links.txt'
    if os.path.exists(seen_links_file):
        os.remove(seen_links_file)
    
    try:
        await update.message.reply_html(
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç!</b> üéâ\n\n"
            f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –≤ –∫–∞–Ω–∞–ª.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=main_keyboard
        )
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", 
            reply_markup=main_keyboard
        )

async def send_news(update: Update, context: CallbackContext):
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏")
        await update.message.reply_html(
            f"üì° <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...</b>", 
            reply_markup=main_keyboard
        )
        
        all_news, error_urls = await RealNewsParser.fetch_rss_news(context)
        
        if not all_news:
            error_msg = f"‚ö†Ô∏è <b>–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π!</b> üòî"
            if error_urls:
                error_msg += f"\n–ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏: {len(error_urls)}"
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {error_urls}")
            await update.message.reply_html(error_msg, reply_markup=main_keyboard)
            return
        
        message = await RealNewsParser.format_news_message(all_news)
        context.user_data['last_news'] = {
            'items': all_news,
            'message': message
        }
        
        await update.message.reply_html(
            message, 
            disable_web_page_preview=True, 
            reply_markup=main_keyboard
        )
        logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_keyboard
        )

async def post_to_channel(update: Update, context: CallbackContext):
    global news_posted
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª")
        
        if 'last_news' not in context.user_data:
            await update.message.reply_html(
                f"‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>", 
                reply_markup=main_keyboard
            )
            return
        
        news_data = context.user_data['last_news']
        await update.message.reply_html(
            f"üì¢ <b>–ü—É–±–ª–∏–∫—É—é –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª...</b>", 
            reply_markup=main_keyboard
        )
        
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=news_data['message'],
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        await update.message.reply_html(
            f"‚úÖ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!</b> üéâ", 
            reply_markup=main_keyboard
        )
        
        news_posted += len(news_data['items'])
        logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.", 
            reply_markup=main_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_keyboard
        )

async def show_autopublish_info(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        schedule_info = scheduler_instance.get_schedule_info() if scheduler_instance else {
            'auto_posts_count': 0,
            'last_auto_post': '–ù–µ—Ç',
            'next_auto_post': '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ',
            'schedule_times': ['09:00', '12:00', '15:00', '18:00', '21:00'],
            'is_running': False
        }
        
        auto_message = (
            f"üìÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
            f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ú–°–ö):</b>\n"
        )
        
        for time_str in schedule_info['schedule_times']:
            auto_message += f"   ‚Ä¢ {time_str}\n"
        
        auto_message += (
            f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"ü§ñ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {schedule_info['auto_posts_count']}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {schedule_info['last_auto_post']}\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {schedule_info['next_auto_post']}\n\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if schedule_info['is_running'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            f"‚ÑπÔ∏è <i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ –∫–∞–Ω–∞–ª 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å. "
            f"–ù–æ–≤–æ—Å—Ç–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è.</i>"
        )
        
        await update.message.reply_html(auto_message, reply_markup=main_keyboard)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!</b>", 
            reply_markup=main_keyboard
        )

async def show_stats(update: Update, context: CallbackContext):
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        try:
            subscriber_count = await context.bot.get_chat_member_count(CHANNEL_ID)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            subscriber_count = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_file = 'subscribers.txt'
        if isinstance(subscriber_count, int):
            with open(subscribers_file, 'a', encoding='utf-8') as f:
                f.write(f"{datetime.datetime.now().isoformat()},{subscriber_count}\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        schedule_info = scheduler_instance.get_schedule_info() if scheduler_instance else {
            'auto_posts_count': 0,
            'last_auto_post': '–ù–µ—Ç',
            'next_auto_post': '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ',
            'is_running': False
        }
        
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üìà –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_fetched}\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é: {news_posted}\n"
            f"ü§ñ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–π: {schedule_info['auto_posts_count']}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {subscriber_count}\n\n"
            f"üìÖ <b>–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è:</b>\n"
            f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 9:00, 12:00, 15:00, 18:00, 21:00 –ú–°–ö\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è: {schedule_info['last_auto_post']}\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è: {schedule_info['next_auto_post']}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if schedule_info['is_running'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            f"üïí –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Replit"
        )
        
        await update.message.reply_html(stats_message, reply_markup=main_keyboard)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!</b>", 
            reply_markup=main_keyboard
        )

async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    try:
        if text == 'üì∞ –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            await send_news(update, context)
        elif text == 'üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª':
            await post_to_channel(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await show_stats(update, context)
        elif text == 'üìÖ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è':
            await show_autopublish_info(update, context)
        elif text == 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
            await update.message.reply_text(
                "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞:\n\n"
                "üîß –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                "‚ö° –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Replit\n"
                "üì∞ –°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
                "üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
                "‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @imcouncilor", 
                reply_markup=main_keyboard
            )
        else:
            await update.message.reply_html(
                f"üìù <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!</b> üòä", 
                reply_markup=main_keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await update.message.reply_html(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=main_keyboard
        )

async def error_callback(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
    if update and hasattr(update, 'message') and update.message:
        try:
            await update.message.reply_html(
                f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=main_keyboard
            )
        except Exception:
            pass

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    global scheduler_instance
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_callback)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ @{BOT_USERNAME}...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        logger.info("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        scheduler_instance = NewsScheduler(BOT_TOKEN, CHANNEL_ID, RealNewsParser)
        scheduler_instance.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if scheduler_instance:
            scheduler_instance.stop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ Replit...")
        
        # –ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info("üì° –ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–µ—Ä–∞...")
        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞...")
        run_bot()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()